way1:
Duck集中了鸭子的所有的特性，但需要多次覆盖父类方法
如果扩展鸭子的行为时，修改量大不利于维护、缺少弹性

way2:
虽然将鸭子的行为抽离出来，提供了fly和quack接口，但不同各类的鸭子都要实现其方法，重复量大，也不能实现行为的动态修改
鸭子的特性不能在duck中完全展现出来

way3:
在duck中可以看出鸭子所具有的所有特性
fly行为和quack行为可以在运行时决定
增加鸭子行为时不影响原行为，实现弹性、维护性高、充分复用了代码


总结：
策略模式：定义算法族，分别封装起来，让它们之间互相替换，此模式让算法的变化独立于使用算法的用户。

OO基础：
抽象
封装
继承
多态

OO原则：
封装变化
多用组合，少用继承
针对接口编程，不针对实现编程
