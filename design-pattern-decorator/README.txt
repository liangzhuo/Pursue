
原场景：
	1.所有的饮品和调味品都继承一个类，过于庞大
	2.涉及金额计算时，工作量超大
	
优化场景1：
	1.将调味品加入超类，简化了继承
	2.金额计算时相对简单
	3.如果增加调味品时需修改超类
	
优化场景2：
	1.饮品超类只具有基本的描述
	2.子类实现其单品金额
	3.新增调味品装饰者扩展饮品行为
	4.可在运行时进行组合出加了不同调味器的饮品
	
OO原则：
	对扩展开放，对修改关闭	
	
装饰者模式：
	动态的将责任附加到对象上。想要扩展功能，装饰者提供有别于继承的另一种选择。		